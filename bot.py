import json
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from datetime import datetime

TOKEN = '8146754055:AAGGtB5yLNWnRn17rXtJi1dbCb5Fvf-DU70'

DATA_FILE = "userdata.json"
user_data = {}

def load_data():
    global user_data
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            user_data = json.load(f)

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(user_data, f, ensure_ascii=False, indent=2)

def start(update, context):
    update.message.reply_text("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!")

def warn(update, context):
    if not update.message.reply_to_message:
        update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É
    admin_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
    chat_admins = [admin.user.id for admin in context.bot.get_chat_administrators(update.message.chat_id)]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if admin_id not in chat_admins:
        update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
        return

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω
    user = update.message.reply_to_message.from_user
    user_id = str(user.id)

    if user_id not in user_data:
        user_data[user_id] = {
            "nickname": user.first_name,
            "warns": 1,
            "roles": [],
            "joined": str(datetime.now())
        }
    else:
        user_data[user_id]["warns"] = user_data[user_id].get("warns", 0) + 1

    warns = user_data[user_id]["warns"]
    save_data()

    if warns >= 6:
        try:
            update.message.chat.kick_member(user.id)
            update.message.reply_text(f"{user.first_name} –ø–æ–ª—É—á–∏–ª 6/6 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.")
        except:
            update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        update.message.reply_text(f"{user.first_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warns}/6.")

def unwarn(update: Update, context: CallbackContext):
    if not update.message.reply_to_message:
        update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –≤–∞—Ä–Ω.")
        return

    admin_id = update.effective_user.id
    chat_admins = [admin.user.id for admin in context.bot.get_chat_administrators(update.message.chat_id)]
    
    if admin_id not in chat_admins:
        update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–Ω–∏–º–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
        return

    user_id = str(update.message.reply_to_message.from_user.id)
    user_entry = user_data.get(user_id, {})
    warns = user_entry.get("warns", 0)

    if warns > 0:
        user_entry["warns"] = warns - 1
        user_data[user_id] = user_entry
        save_data()
        update.message.reply_text(f"–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω—è—Ç 1 –≤–∞—Ä–Ω. –¢–µ–ø–µ—Ä—å –≤–∞—Ä–Ω–æ–≤: {user_entry['warns']}/6.")
    else:
        update.message.reply_text("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤–∞—Ä–Ω–æ–≤.")
        
def kick(update: Update, context: CallbackContext):
    if not update.message.reply_to_message:
        update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–∑—ã–≤–∞—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    admin_id = update.effective_user.id
    chat_admins = [admin.user.id for admin in context.bot.get_chat_administrators(update.message.chat_id)]

    if admin_id not in chat_admins:
        update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    # –ö–∏–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_to_kick = update.message.reply_to_message.from_user
        update.message.chat.kick_member(user_to_kick.id)
        update.message.reply_text(f"{user_to_kick.first_name} –±—ã–ª –∫–∏–∫–Ω—É—Ç.")
    except:
        update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                                  
def ban(update: Update, context: CallbackContext):
    if not update.message.reply_to_message:
        update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–æ–º
    admin_id = update.effective_user.id
    chat_admins = [admin.user.id for admin in context.bot.get_chat_administrators(update.message.chat_id)]

    if admin_id not in chat_admins:
        update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_to_ban = update.message.reply_to_message.from_user
        update.message.chat.kick_member(user_to_ban.id)
        update.message.reply_text(f"{user_to_ban.first_name} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.")
    except:
        update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        
def unban(update: Update, context: CallbackContext):
    admin_id = update.effective_user.id
    chat_admins = [admin.user.id for admin in context.bot.get_chat_administrators(update.message.chat_id)]

    if admin_id not in chat_admins:
        update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    try:
        user_id = int(context.args[0])
        update.message.chat.unban_member(user_id)
        update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    except (IndexError, ValueError):
        update.message.reply_text("–£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: .—Ä–∞–∑–±–∞–Ω <id>")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ: {e}")
        
def set_name(update: Update, context: CallbackContext):
    user = update.effective_user
    user_id = str(user.id)

    nickname = update.message.text.split(maxsplit=1)
    if len(nickname) < 2:
        update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∏–∫: .–∏–º—è <—Ç–≤–æ–π_–Ω–∏–∫>")
        return

    nickname_text = nickname[1]  

    if user_id not in user_data:
        user_data[user_id] = {"nickname": nickname_text, "warns": 0, "roles": [], "joined": str(datetime.now())}
    else:
        user_data[user_id]["nickname"] = nickname_text

    save_data()
    update.message.reply_text(f"–¢–≤–æ–π –Ω–∏–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {nickname_text}")
def we_command(update: Update, context: CallbackContext):
    update.message.reply_text("ùëºùíèùíÖùíÜùíì ùíïùíâùíÜ ùíéùíêùíêùíèùíçùíäùíàùíâùíï üåë")
    
def show_nick(update, context):
    user_id = str(update.effective_user.id)
    nickname = user_data.get(user_id, {}).get("nickname", update.effective_user.first_name)
    update.message.reply_text(f" ùìæùìΩùì∂ || {nickname} ‚á£  üåë ")

def give_role(update: Update, context: CallbackContext):
    if not update.message.reply_to_message or not context.args:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .—Ä–æ–ª—å <—Ä–æ–ª—å> (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
        return

    admin_id = update.effective_user.id
    chat_admins = [admin.user.id for admin in context.bot.get_chat_administrators(update.message.chat_id)]

    if admin_id not in chat_admins:
        update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Ä–æ–ª–∏.")
        return

    role = ' '.join(context.args)
    user = update.message.reply_to_message.from_user
    user_id = str(user.id)

    if user_id not in user_data:
        user_data[user_id] = {"nickname": user.first_name, "warns": 0, "roles": [], "joined": str(datetime.now())}

    if role not in user_data[user_id]["roles"]:
        user_data[user_id]["roles"].append(role)
        save_data()
        update.message.reply_text(f"–†–æ–ª—å '{role}' –≤—ã–¥–∞–Ω–∞ {user.first_name}.")
    else:
        update.message.reply_text(f"–£ {user.first_name} —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ —Ä–æ–ª—å.")

def remove_role(update, context):
    if not update.message.reply_to_message or not context.args:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removerole <—Ä–æ–ª—å> (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
        return
    admin = update.effective_user
    chat_admins = [admin.user.id for admin in context.bot.get_chat_administrators(update.message.chat_id)]
    if admin.id not in chat_admins:
        update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Ä–æ–ª–∏.")
        return
    role = ' '.join(context.args)
    user = update.message.reply_to_message.from_user
    user_id = str(user.id)
    if user_id in user_data and role in user_data[user_id]["roles"]:
        user_data[user_id]["roles"].remove(role)
        update.message.reply_text(f"–†–æ–ª—å '{role}' —É–¥–∞–ª–µ–Ω–∞ —É {user.first_name}.")
        save_data()
    else:
        update.message.reply_text("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

def welcome_new_member(update: Update, context: CallbackContext):
    for member in update.message.new_chat_members:
        username = f"@{member.username}" if member.username else member.full_name

        text = f"""
üåò ùëæùíÜùíçùíÑùíêùíéùíÜ ùíïùíê ùíïùíâùíÜ ùíîùíäùíçùíÜùíèùíï ùíîùíäùíÖùíÜ... üåí  
–øœÅ·•ô ô·•±·¥õ·•¥·¥õ ô—É·•± ç ·¥õ·•±Œ¥—è, {username}!

–¢—ã ·¥õ·ßê·ßò—åŒ∫·ßê —á·¥õ·ßê ·ßê·¥õŒ∫œÅ—ã·ßò –¥ ô·•±œÅ—å  ô  ç·•ôœÅ, ·¥¶–¥·•± Œ∫·•≤–∂–¥—ã·•î —Ö·ßê–¥ ‚Äî œ∂·¥õ·ßê ·ßê·¥õœÅ·•≤–∂·•±–Ω·•ô·•±  ô ·ßò—É–Ω–Ω·ßê·•î  ô·ßê–¥·•± -  ô –Ω·•≤…Ø·•± ç ·¥õ—ë ç–Ω·ßê ç ·•ô Œ∫œÅ·•≤·•¥·•ô ô·ßê ç ·•∞œÅ·ßê·•¥·¥õœÅ·•≤–Ω·•¥·¥õ ô·•±

            ‚ùù ùëºùíèùíÖùíÜùíì ùíïùíâùíÜ ùíéùíêùíêùíèùíçùíäùíàùíâùíï ‚ùû

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ï≠ ‚äπ Íí∞ –í·•¥—è ·•∞·ßê·ßò·•±…ú–Ω·•≤—è ·•ô–Ω…∏·ßêœÅ ç·•≤—Ü·•ô—è –¥·ßò—è –Ω·ßê ô·•ô—áŒ∫·ßê ô ‚Äî –Ω·•ô–∂·•±.
‚ï∞ ‚äπ  –ó·•≤–¥·•≤ ô·•≤·•î  ô·ßê·•∞œÅ·ßê ¥—ã, –Ω·•± Œ¥·ßê·•î·•¥—è —É—á·•≤·•¥·¥õ ô·ßê ô·•≤·¥õ—å ·•ô ·•¥·•ô—è·•î  ô –Ω·•≤…Ø·•ô—Ö ·•ô·¥¶œÅ·•≤—Ö.

–î·ßê  ô·•¥·¥õœÅ·•±—á·•ô –Ω·•≤ ·•≤œÅ·•±–Ω·•±, ùíçùíñùíèùíÇùíì ùíàùíñùíÜùíîùíï. üåô
"""
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìú Information", url="https://t.me/+m7fO4Q3Xx2diMjAy")],
            [InlineKeyboardButton("üß≠ Guide", url="https://t.me/+R3it2sniWV1jZGEy")],
            [InlineKeyboardButton("üóû News", url="https://t.me/+uJh7MjVloBYyY2Yy")]
        ])
        update.message.reply_text(text, reply_markup=keyboard)

def goodbye(update: Update, context: CallbackContext): 
    user = update.message.left_chat_member
    name = user.first_name
    text = f"""
{name} –ø–æ–∫–∏–¥–∞–µ—Ç –Ω–∞—à –ø—É—Ç—å –ø–æ–¥ –ª—É–Ω–Ω—ã–º —Å–≤–µ—Ç–æ–º. –ö–∞–∂–¥—ã–π –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥, –∏ —Ç–≤–æ–π –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ Under the Moonlight üåí. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É, –∑–∞ —É—á–∞—Å—Ç–∏–µ –∏ –∑–∞ —Ç–æ, —á—Ç–æ –±—ã–ª(–∞) —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –Ω–æ—á–Ω–æ–π –ª–µ–≥–µ–Ω–¥—ã.

ùíèùíêùíò‚Ä¶ ùíïùíâùíÜ ùíéùíêùíêùíè ùíîùíâùíäùíèùíÜùíî ùíáùíêùíì ùíÇùíèùíêùíïùíâùíÜùíì.

–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ ‚Äî –≥–¥–µ –±—ã —Ç—ã –Ω–∏ –æ–∫–∞–∑–∞–ª—Å—è(–∞—Å—å) üåô
"""
    update.message.reply_text(text)

def send_cc_link(update: Update, context: CallbackContext):
    update.message.reply_text("https://t.me/+dWD8UqTCjGE4YWQ6")
    
def info(update, context):
    if not update.message.reply_to_message:
        update.message.reply_text("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω—Ñ–æ.")
        return
    user = update.message.reply_to_message.from_user
    user_id = str(user.id)
    data = user_data.get(user_id, {})
    nickname = data.get("nickname", user.first_name)
    warns = data.get("warns", 0)
    username = f"@{user.username}" if user.username else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    joined = data.get("joined", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    roles = data.get("roles", [])
    roles_text = "\n".join([f" ‚îú {r}" for r in roles]) if roles else " ‚îî –ù–µ—Ç —Ä–æ–ª–µ–π"

    text = (
        f"üÜî ID: {user.id} #id{user.id}\n"
        f"üë± –ò–º—è: {nickname} (!)\n"
        f"üåê –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}\n"
        f"üëÄ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –í –≥—Ä—É–ø–ø–µ\n"
        f"‚û∞ –†–æ–ª–∏:\n{roles_text}\n"
        f"‚ùï –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warns}/6\n"
        f"‚§µÔ∏è –í—Å—Ç—É–ø–∏–ª(–∞): {joined}\n"
        f"üá∑üá∫ –Ø–∑—ã–∫: Russian"
    )
    update.message.reply_text(text)

def main():
    load_data()
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'^\.—Å—Ç–∞—Ä—Ç$'), start))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'^\.–≤–∞—Ä–Ω$'), warn))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'^\.–∫–∏–∫$'), kick))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'^\.–±–∞–Ω$'), ban))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'^\.—Ä–∞–∑–±–∞–Ω\b'), unban))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'^\.–∏–º—è\b'), set_name))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'^\.–∏–Ω—Ñ–æ$'), info))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'^\.–Ω–∏–∫$'), show_nick))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'^\.—Ä–æ–ª—å\b'), give_role))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'^\.—É–¥–∞–ª–∏—Ç—å—Ä–æ–ª—å\b'), remove_role))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r"^\.unwarn$"), unwarn))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'^\.–º—ã$'), we_command))
    dp.add_handler(MessageHandler(Filters.status_update.new_chat_members, welcome_new_member))
    dp.add_handler(MessageHandler(Filters.status_update.left_chat_member, goodbye))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'^\.cc$'), send_cc_link))

    updater.start_polling()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.idle()

if __name__ == '__main__':
    main()
